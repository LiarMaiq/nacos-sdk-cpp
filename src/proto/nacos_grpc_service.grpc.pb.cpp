// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nacos_grpc_service.proto

#include "nacos_grpc_service.pb.h"
#include "nacos_grpc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* RequestStream_method_names[] = {
  "/RequestStream/requestStream",
};

std::unique_ptr< RequestStream::Stub> RequestStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RequestStream::Stub> stub(new RequestStream::Stub(channel));
  return stub;
}

RequestStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestStream_(RequestStream_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::Payload>* RequestStream::Stub::requestStreamRaw(::grpc::ClientContext* context, const ::Payload& request) {
  return ::grpc::internal::ClientReaderFactory< ::Payload>::Create(channel_.get(), rpcmethod_requestStream_, context, request);
}

void RequestStream::Stub::experimental_async::requestStream(::grpc::ClientContext* context, ::Payload* request, ::grpc::experimental::ClientReadReactor< ::Payload>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Payload>::Create(stub_->channel_.get(), stub_->rpcmethod_requestStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Payload>* RequestStream::Stub::AsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Payload>::Create(channel_.get(), cq, rpcmethod_requestStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Payload>* RequestStream::Stub::PrepareAsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Payload>::Create(channel_.get(), cq, rpcmethod_requestStream_, context, request, false, nullptr);
}

RequestStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RequestStream_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RequestStream::Service, ::Payload, ::Payload>(
          [](RequestStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Payload* req,
             ::grpc::ServerWriter<::Payload>* writer) {
               return service->requestStream(ctx, req, writer);
             }, this)));
}

RequestStream::Service::~Service() {
}

::grpc::Status RequestStream::Service::requestStream(::grpc::ServerContext* context, const ::Payload* request, ::grpc::ServerWriter< ::Payload>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Request_method_names[] = {
  "/Request/request",
};

std::unique_ptr< Request::Stub> Request::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Request::Stub> stub(new Request::Stub(channel));
  return stub;
}

Request::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_request_(Request_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Request::Stub::request(::grpc::ClientContext* context, const ::Payload& request, ::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Payload, ::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_request_, context, request, response);
}

void Request::Stub::experimental_async::request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Payload, ::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_, context, request, response, std::move(f));
}

void Request::Stub::experimental_async::request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_request_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Payload>* Request::Stub::PrepareAsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Payload, ::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_request_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Payload>* Request::Stub::AsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

Request::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Request_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Request::Service, ::Payload, ::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Request::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Payload* req,
             ::Payload* resp) {
               return service->request(ctx, req, resp);
             }, this)));
}

Request::Service::~Service() {
}

::grpc::Status Request::Service::request(::grpc::ServerContext* context, const ::Payload* request, ::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BiRequestStream_method_names[] = {
  "/BiRequestStream/requestBiStream",
};

std::unique_ptr< BiRequestStream::Stub> BiRequestStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BiRequestStream::Stub> stub(new BiRequestStream::Stub(channel));
  return stub;
}

BiRequestStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestBiStream_(BiRequestStream_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::Payload, ::Payload>* BiRequestStream::Stub::requestBiStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Payload, ::Payload>::Create(channel_.get(), rpcmethod_requestBiStream_, context);
}

void BiRequestStream::Stub::experimental_async::requestBiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Payload,::Payload>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Payload,::Payload>::Create(stub_->channel_.get(), stub_->rpcmethod_requestBiStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>* BiRequestStream::Stub::AsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Payload, ::Payload>::Create(channel_.get(), cq, rpcmethod_requestBiStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>* BiRequestStream::Stub::PrepareAsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Payload, ::Payload>::Create(channel_.get(), cq, rpcmethod_requestBiStream_, context, false, nullptr);
}

BiRequestStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BiRequestStream_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BiRequestStream::Service, ::Payload, ::Payload>(
          [](BiRequestStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Payload,
             ::Payload>* stream) {
               return service->requestBiStream(ctx, stream);
             }, this)));
}

BiRequestStream::Service::~Service() {
}

::grpc::Status BiRequestStream::Service::requestBiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


