// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nacos_grpc_service.proto
// Original file comments:
// 
// Copyright 1999-2020 Alibaba Group Holding Ltd.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_nacos_5fgrpc_5fservice_2eproto__INCLUDED
#define GRPC_nacos_5fgrpc_5fservice_2eproto__INCLUDED

#include "nacos_grpc_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class RequestStream final {
 public:
  static constexpr char const* service_full_name() {
    return "RequestStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // build a streamRequest
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Payload>> requestStream(::grpc::ClientContext* context, const ::Payload& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Payload>>(requestStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Payload>> AsyncrequestStream(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Payload>>(AsyncrequestStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Payload>> PrepareAsyncrequestStream(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Payload>>(PrepareAsyncrequestStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // build a streamRequest
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestStream(::grpc::ClientContext* context, ::Payload* request, ::grpc::ClientReadReactor< ::Payload>* reactor) = 0;
      #else
      virtual void requestStream(::grpc::ClientContext* context, ::Payload* request, ::grpc::experimental::ClientReadReactor< ::Payload>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::Payload>* requestStreamRaw(::grpc::ClientContext* context, const ::Payload& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Payload>* AsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Payload>* PrepareAsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::Payload>> requestStream(::grpc::ClientContext* context, const ::Payload& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Payload>>(requestStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Payload>> AsyncrequestStream(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Payload>>(AsyncrequestStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Payload>> PrepareAsyncrequestStream(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Payload>>(PrepareAsyncrequestStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestStream(::grpc::ClientContext* context, ::Payload* request, ::grpc::ClientReadReactor< ::Payload>* reactor) override;
      #else
      void requestStream(::grpc::ClientContext* context, ::Payload* request, ::grpc::experimental::ClientReadReactor< ::Payload>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::Payload>* requestStreamRaw(::grpc::ClientContext* context, const ::Payload& request) override;
    ::grpc::ClientAsyncReader< ::Payload>* AsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Payload>* PrepareAsyncrequestStreamRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // build a streamRequest
    virtual ::grpc::Status requestStream(::grpc::ServerContext* context, const ::Payload* request, ::grpc::ServerWriter< ::Payload>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestStream(::grpc::ServerContext* context, ::Payload* request, ::grpc::ServerAsyncWriter< ::Payload>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestStream<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_requestStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Payload, ::Payload>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Payload* request) { return this->requestStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Payload>* requestStream(
      ::grpc::CallbackServerContext* /*context*/, const ::Payload* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Payload>* requestStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Payload* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_requestStream<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_requestStream<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_requestStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->requestStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* requestStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* requestStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_requestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_requestStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Payload, ::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Payload, ::Payload>* streamer) {
                       return this->StreamedrequestStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_requestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestStream(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::grpc::ServerWriter< ::Payload>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedrequestStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Payload,::Payload>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_requestStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_requestStream<Service > StreamedService;
};

class Request final {
 public:
  static constexpr char const* service_full_name() {
    return "Request";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a commonRequest
    virtual ::grpc::Status request(::grpc::ClientContext* context, const ::Payload& request, ::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Payload>> Asyncrequest(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Payload>>(AsyncrequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Payload>> PrepareAsyncrequest(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Payload>>(PrepareAsyncrequestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a commonRequest
      virtual void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Payload>* AsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Payload>* PrepareAsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status request(::grpc::ClientContext* context, const ::Payload& request, ::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Payload>> Asyncrequest(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Payload>>(AsyncrequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Payload>> PrepareAsyncrequest(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Payload>>(PrepareAsyncrequestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void request(::grpc::ClientContext* context, const ::Payload* request, ::Payload* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Payload>* AsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Payload>* PrepareAsyncrequestRaw(::grpc::ClientContext* context, const ::Payload& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_request_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a commonRequest
    virtual ::grpc::Status request(::grpc::ServerContext* context, const ::Payload* request, ::Payload* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_request() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrequest(::grpc::ServerContext* context, ::Payload* request, ::grpc::ServerAsyncResponseWriter< ::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_request<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_request() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Payload, ::Payload>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Payload* request, ::Payload* response) { return this->request(context, request, response); }));}
    void SetMessageAllocatorFor_request(
        ::grpc::experimental::MessageAllocator< ::Payload, ::Payload>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Payload, ::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* request(
      ::grpc::CallbackServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* request(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_request<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_request<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_request() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_request() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_request() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->request(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* request(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* request(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_request() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Payload, ::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Payload, ::Payload>* streamer) {
                       return this->Streamedrequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status request(::grpc::ServerContext* /*context*/, const ::Payload* /*request*/, ::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Payload,::Payload>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_request<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_request<Service > StreamedService;
};

class BiRequestStream final {
 public:
  static constexpr char const* service_full_name() {
    return "BiRequestStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a commonRequest
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Payload, ::Payload>> requestBiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Payload, ::Payload>>(requestBiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>> AsyncrequestBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>>(AsyncrequestBiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>> PrepareAsyncrequestBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>>(PrepareAsyncrequestBiStreamRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a commonRequest
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestBiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Payload,::Payload>* reactor) = 0;
      #else
      virtual void requestBiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Payload,::Payload>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::Payload, ::Payload>* requestBiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>* AsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Payload, ::Payload>* PrepareAsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Payload, ::Payload>> requestBiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Payload, ::Payload>>(requestBiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>> AsyncrequestBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>>(AsyncrequestBiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>> PrepareAsyncrequestBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>>(PrepareAsyncrequestBiStreamRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestBiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Payload,::Payload>* reactor) override;
      #else
      void requestBiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Payload,::Payload>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::Payload, ::Payload>* requestBiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>* AsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Payload, ::Payload>* PrepareAsyncrequestBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestBiStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a commonRequest
    virtual ::grpc::Status requestBiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestBiStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestBiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Payload, ::Payload>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestBiStream<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_requestBiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::Payload, ::Payload>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->requestBiStream(context); }));
    }
    ~ExperimentalWithCallbackMethod_requestBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::Payload, ::Payload>* requestBiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::Payload, ::Payload>* requestBiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_requestBiStream<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_requestBiStream<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestBiStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestBiStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestBiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_requestBiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->requestBiStream(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_requestBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Payload, ::Payload>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* requestBiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* requestBiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};


#endif  // GRPC_nacos_5fgrpc_5fservice_2eproto__INCLUDED
